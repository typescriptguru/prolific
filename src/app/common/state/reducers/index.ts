import '@ngrx/core/add/operator/select';import 'rxjs/add/operator/switchMap';import 'rxjs/add/operator/let';import { Observable } from 'rxjs/Observable';/** * The compose function is one of our most handy tools. In basic terms, you give * it any number of functions and it returns a function. This new function * takes a value and chains it through every composed function, returning * the output. * * More: https://drboolean.gitbooks.io/mostly-adequate-guide/content/ch5.html */import { compose } from '@ngrx/core/compose';/** * Advanced logging for @ngrx/store applications, ported from redux-logger */import { storeLogger } from 'ngrx-store-logger';/** * combineReducers is another useful metareducer that takes a map of reducer * functions and creates a new reducer that stores the gathers the values * of each reducer and stores them using the reducer's key. Think of it * almost like a database, where every reducer is a table in the db. * * More: https://egghead.io/lessons/javascript-redux-implementing-combinereducers-from-scratch */import { combineReducers } from '@ngrx/store';import { environment } from '../../../../environments/environment';/** * Every reducer module's default export is the reducer function itself. In * addition, each module should export a type or interface that describes * the state of the reducer plus any selector functions. The `* as` * notation packages up all of the exports into a single object. */// dataimport * as fromActivitiesReducer from './data/activities.reducer';import * as fromAuthReducer from './data/auth.reducer';import * as fromEventsReducer from './data/events.reducer';import * as fromNutritionsReducer from './data/nutritions.reducer';import * as fromProfileCustomisationsReducer from './data/profile-customisations.reducer';import * as fromProfileReducer from './data/profile.reducer';/** * As mentioned, we treat each reducer like a table in a database. This means * our top level state interface is just a map of keys to inner state types. */export interface ApplicationState {  activities: fromActivitiesReducer.DataActivitiesState,  auth: fromAuthReducer.DataAuthState;  events: fromEventsReducer.DataEventsState;  nutritions: fromNutritionsReducer.DataNutritionsState;  profileCustomisations: fromProfileCustomisationsReducer.DataProfileCustomisationsState;  profile: fromProfileReducer.DataProfileState;}/** * Because metareducers take a reducer function and return a new reducer, * we can use our compose helper to chain them together. Here we are * using combineReducers to make our top level reducer, and then * wrapping that in storeLogger. Remember that compose applies * the result from right to left. */const reducers = {  activities: fromActivitiesReducer.ActivitiesReducer,  auth: fromAuthReducer.AuthReducer,  events: fromEventsReducer.EventsReducer,  nutritions: fromNutritionsReducer.NutritionsReducer,  profileCustomisations: fromProfileCustomisationsReducer.ProfileCustomisationsReducer,  profile: fromProfileReducer.ProfileReducer};const developmentReducer = compose(storeLogger(), combineReducers)(reducers);const productionReducer = combineReducers(reducers);export function reducer(state: any, action: any) {  if (environment.production) {    return productionReducer(state, action);  } else {    return developmentReducer(state, action);   }}// Selectors// Data// Activitiesexport function getActivitiesState(state$: Observable<ApplicationState>) {  return state$.select(state => state.activities);}export const getActivitiesSelector = compose(fromActivitiesReducer.getActivities, getActivitiesState);export const getActivitiesAreLoadedSelector = compose(fromActivitiesReducer.getActivitiesAreLoaded, getActivitiesState);export const getActivitiesAreLoadingSelector = compose(fromActivitiesReducer.getActivitiesAreLoading, getActivitiesState);export const getActivityIsCreatingSelector = compose(fromActivitiesReducer.getActivityIsCreating, getActivitiesState);// Authexport function getAuthState(state$: Observable<ApplicationState>) {  return state$.select(state => state.auth);}export const getUserSelector = compose(fromAuthReducer.getUser, getAuthState);export function getEventsState(state$: Observable<ApplicationState>) {  return state$.select(state => state.events);}// Eventsexport const getEventsSelector = compose(fromEventsReducer.getEvents, getEventsState);export const getEventsAreLoadedSelector = compose(fromEventsReducer.getEventsAreLoaded, getEventsState);export const getEventsAreLoadingSelector = compose(fromEventsReducer.getEventsAreLoading, getEventsState);export const getEventIsCreatingSelector = compose(fromEventsReducer.getEventIsCreating, getEventsState);// Nutritionsexport function getNutritionsState(state$: Observable<ApplicationState>) {  return state$.select(state => state.nutritions);}export const getNutritionsSelector = compose(fromNutritionsReducer.getNutritions, getNutritionsState);export const getNutritionsAreLoadedSelector = compose(fromNutritionsReducer.getNutritionsAreLoaded, getNutritionsState);export const getNutritionsAreLoadingSelector = compose(fromNutritionsReducer.getNutritionsAreLoading, getNutritionsState);export const getNutritionIsCreatingSelector = compose(fromNutritionsReducer.getNutritionIsCreating, getNutritionsState);// Profileexport function getProfileState(state$: Observable<ApplicationState>) {  return state$.select(state => state.profile);}export const getProfileSelector = compose(fromProfileReducer.getProfile, getProfileState);export const getProfileIsLoadedSelector = compose(fromProfileReducer.getProfileIsLoaded, getProfileState);// Avatar customisationsexport function getProfileCustomisationsState(state$: Observable<ApplicationState>) {  return state$.select(state => state.profileCustomisations);}export const getAvatarClothesSelector = compose(fromProfileCustomisationsReducer.getAvatarClothes, getProfileCustomisationsState);export const getAvatarClothesAreLoadedSelector = compose(fromProfileCustomisationsReducer.getAvatarClothesAreLoaded, getProfileCustomisationsState);export const getBackgroundsSelector = compose(fromProfileCustomisationsReducer.getBackgrounds, getProfileCustomisationsState);export const getBackgroundsAreLoadedSelector = compose(fromProfileCustomisationsReducer.getBackgroundsAreLoaded, getProfileCustomisationsState);